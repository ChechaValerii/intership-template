const jwt = require('jsonwebtoken');
const UserToken = require('./model');

async function generateTokens (user) {
    try {
        const payload = { _id: user._id };
        const accessToken = jwt.sign(
            payload,
            ACCESS_TOKEN_PRIVATE_KEY,
            { expiresIn: "1m" }
        );
        const refreshToken = jwt.sign(
            payload,
            REFRESH_TOKEN_PRIVATE_KEY,
            { expiresIn: "15m" }
        );

        const userToken = await UserToken.findOne({ userId: user._id });
        if (userToken) await userToken.remove();

        await new UserToken({ userId: user._id, token: refreshToken }).save();
        return Promise.resolve({ accessToken, refreshToken });
    } catch (err) {
        return Promise.reject(err);
    }
}

async function verifyRefreshToken (refreshToken) {
    const privateKey = REFRESH_TOKEN_PRIVATE_KEY;

    return new Promise((resolve, reject) => {
        UserToken.findOne({ token: refreshToken }, (err, doc) => {
            if (!doc)
                return reject({ error: true, message: "Invalid refresh token" });

            jwt.verify(refreshToken, privateKey, (err, tokenDetails) => {
                if (err)
                    return reject({ error: true, message: "Invalid refresh token" });
                resolve({
                    tokenDetails,
                    error: false,
                    message: "Valid refresh token",
                });
            });
        });
    });
}

module.exports = {
    generateTokens,
    verifyRefreshToken,
};
